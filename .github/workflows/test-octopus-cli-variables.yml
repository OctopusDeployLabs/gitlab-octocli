name: octopus-cli - test environment variables

on:
  workflow_dispatch:

jobs:
  
  get-octopus-cli-version:
    runs-on: windows-latest
    outputs: 
      VERSION: ${{ steps.choco.outputs.VERSION }}
      CONTINUE: ${{ steps.choco.outputs.CONTINUE }}
    steps:
      - uses: actions/checkout@v2
      - id: choco
        name: Compare latest version with container
        run: |
          $chocoInformationRaw = choco info octopus-cli --limitoutput
          $version = ($chocoInformationRaw.Split("|"))[1]
          $versionSplit = $version.Split(".")
          
          Write-Host "Retrieving tags ..."
          
          $response = try {
            $repositoryTags = Invoke-RestMethod "https://registry.hub.docker.com/v2/repositories/octopuslabs/gitlab-octopus-cli/tags"
            Write-Host "Retrieval successful!"
          } catch [System.Net.WebException] { 
            $_.Exception.Response 
            Write-Host "Retrieval failed!!"
          }
          
          Write-Host "Version: $version"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT 

          if ($null -eq $response)
          {
            $matchingTag = $repositoryTags | Where-Object {$_.Name -eq $version}
            
            if ($null -ne $matchingTag)
            {
              Write-Host "Docker container already has latest version."
              echo "CONTINUE=No" >> $env:GITHUB_OUTPUT
            }
            else
            {
              Write-Host "vNext Octopus CLI has been updated, create new image."
              echo "CONTINUE=Yes" >> $env:GITHUB_OUTPUT
            }
          }
          else
          {
            if ($response.StatusCode.value__ -eq 404)
            {
              Write-Host "No tags exist for repo, assuming first build."
              echo "CONTINUE=Yes" >> $env:GITHUB_OUTPUT
            }
          }
          
        shell: powershell
          
  build-linux:
    needs: [get-octopus-cli-version]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Docker Hub login
        env:
          USERNAME: ${{ secrets.DOCKER_HUB_USER }}
          PASSWORD: ${{ secrets.DOCKER_HUB_PAT }}
        run: |
             echo "The version is: ${{ needs.get_octo_cli_version.outputs.VERSION }}"
             echo "The continue value is: ${{ needs.get_octo_cli_version.outputs.CONTINUE }}"
             echo "PACKAGE_VERSION=$(date +'%Y.%m.%d').$GITHUB_RUN_NUMBER" >> $GITHUB_ENV


